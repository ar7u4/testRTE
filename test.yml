name: Deploy Lambda Functions and Layers

on:
  push:
    branches:
      - main

jobs:
  deploy-functions-and-layers:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1  # Update with your AWS region

      - name: Install jq
        run: sudo apt-get install jq

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v42

      - name: Deploy Lambda functions
        run: |
          if [[ $(echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -q 'Lambda_functions/'; echo $?) -eq 0 ]]; then
            echo "Deploying Lambda Functions..."
            for modified_folder in $(echo ${{ steps.changed-files.outputs.all_changed_files }} | tr " " "\n" | grep '^Lambda_functions/'); do
              function_folder=$(dirname "$modified_folder")
              echo $function_folder
              function_name=$(basename "$function_folder" | awk -F'/' '{print $(NF-1)}')  # Extract only "anymail"
              echo $function_name

              # Zip the function code using the extracted folder path
              zip -j "${function_name}.zip" "$function_folder"/*

              # Update the function code
              aws lambda update-function-code \
                --function-name "$function_name" \
                --zip-file "fileb://${function_name}.zip"

              new_version_number=$(aws lambda publish-version --function-name "$function_name" --query 'Version' --output text)

              # Update the "latest" alias to point to the new version
              aws lambda update-alias \
                --function-name "$function_name" \
                --name "$function_name" \
                --function-version "$new_version_number"
            done
          fi

      - name: Deploy Lambda Layer
        run: |
          if [[ $(echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -q 'AWS_Lambda_layer/'; echo $?) -eq 0 ]]; then
            echo "Deploying Lambda Layer..."

            # Get the most recently pushed .zip file in the AWS_Lambda_layer/ folder
            recent_zip_file=$(ls -1t AWS_Lambda_layer/*.zip | head -n 1)

            # Check if a .zip file was found
            if [ -z "$recent_zip_file" ]; then
              echo "No .zip files found in AWS_Lambda_layer/ folder"
              exit 1
            fi

            # Publish the layer
            layer_version=$(aws lambda publish-layer-version \
              --layer-name "rte-glb-layer" \
              --zip-file "fileb://$recent_zip_file" \
              --compatible-runtimes python3.10 | jq -r '.LayerVersionArn')

            # Output the LayerVersionArn
            echo "Layer Version Arn: $layer_version"

            # Update all functions with the new layer version
            for function_name in $(aws lambda list-functions --max-items 1000 --query 'Functions[*].FunctionName' --output text); do
              aws lambda update-function-configuration \
                --function-name "$function_name" \
                --layers "$layer_version"
            done
          fi
